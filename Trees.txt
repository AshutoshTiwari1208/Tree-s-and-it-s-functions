#include<iostream>
#include<queue>
using namespace std;
struct node{
int data;
node* left;
node* right;
};
node* head;
node* newnode(int d)
{
    node* alpha=new node();
    alpha->left=NULL;
    alpha->right=NULL;
    alpha->data=d;
    return alpha;
}
node* insert(node* naya,int d)
{
    if(naya==NULL)
    {
        naya=newnode(d);
        return naya;
    }
    else if(naya->data>d)
    {
        naya->left=insert(naya->left,d);
        return naya;
    }
    else{
        naya->right=insert(naya->right,d);
        return naya;
    }
}
node* inorder(node* top)
{
    if(top==NULL)
    {
        return NULL;
    }
    inorder(top->left);
    cout<<top->data<<" " ;
    inorder(top->right);

}
bool search(node* top,int k)
{
    if(top==NULL)
    {
        return false;
    }

    else if (top->data==k)
    {
        return true;
    }
    else if(k>=top->data)
    {
        return(search(top->right,k));
    }
    else{
        return(search(top->left,k));
    }
}
int mini(node* top)
{
    if(top==NULL)
    {
        return -1;
    }
    while(top->left->data!=NULL)
    {
        top=top->left;
    }
    return top->data;
}
int maxi(node* top)
{

    if(top==NULL)
    {
        return -1;
    }
    while(top->right->data!=NULL)
    {
        top=top->right;
    }
    return top->data;
}
node* level(node* alpha)
{
    queue<node*> q;
    cout<<"Level HAAA : ";
    q.push(alpha);
    while(!q.empty())
    {
        node* temp=q.front();
        cout<<temp->data<<" ";
        if(temp->left!=NULL)
            q.push(temp->left);
        if(temp->right!=NULL)
            q.push(temp->right);
        q.pop();
    }
}
int main()
{
    int a;
    cout<<"Type no. of node : "<<endl;
    cin>>a;
    for(int i=0;i<a;i++)
    {
        int temp;
        cin>>temp;
        head=insert(head,temp);
    }
    inorder(head);
    cout<<"Value of search";
    cout<<search(head,20);
    level(head);

    return 0;
}
